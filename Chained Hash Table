/*
 * ChainedHashTable.java
 *
 * Computer Science 112, Boston University
 * 
 * Modifications and additions by:
 *     name: Mengting Bao
 *     email: mtbao@bu.edu
 */

import java.rmi.server.ObjID;
import java.util.*;     // to allow for the use of Arrays.toString() in testing

/*
 * A class that implements a hash table using separate chaining.
 */
public class ChainedHashTable implements HashTable {
    /* 
     * Private inner class for a node in a linked list
     * for a given position of the hash table
     */
    private class Node {
        private Object key;
        private LLQueue<Object> values;
        private Node next;
        
        private Node(Object key, Object value) {
            this.key = key;
            values = new LLQueue<Object>();
            values.insert(value);
            next = null;
        }
    }
    
    private Node[] table;      // the hash table itself
    private int numKeys;       // the total number of keys in the table
        
    /* hash function */
    public int h1(Object key) {
        int h1 = key.hashCode() % table.length;
        if (h1 < 0) {
            h1 += table.length;
        }
        return h1;
    }
    
    /*** Add your constructor here ***/
    public ChainedHashTable(int size){
        if (size < 0){
            throw new IllegalArgumentException("size must be positive");
        }
        table = new Node[size];
    }
    
    /*
     * insert - insert the specified (key, value) pair in the hash table.
     * Returns true if the pair can be added and false if there is overflow.
     */
    public boolean insert(Object key, Object value) {
        /** Replace the following line with your implementation. **/
        if (key == null || value == null){
            throw new IllegalArgumentException("invalid");
        }
        int i = h1(key);
        Node toInsert = new Node(key, value);
        if (i < table.length){
            if (table[i] == null){
                table[i] = toInsert;
            }   
            else{
                Node trav = table[i];
                while (trav != null){
                    if (trav.key == toInsert.key){
                        trav.values.insert(value);
                        return true;
                    }
                    trav = trav.next;
                }
                Node temp = table[i];
                table[i] = toInsert;
                table[i].next = temp;
            }
            numKeys++;
            return true;
        }
        return false;
    }
    
    /*
     * search - search for the specified key and return the
     * associated collection of values, or null if the key 
     * is not in the table
     */
    public Queue<Object> search(Object key) {
        /** Replace the following line with your implementation. **/
        if (key == null){
            throw new IllegalArgumentException("invalid");
        }
        int i = h1(key);
        if (i < table.length){
            return table[i].values;
        }
        return null;
    }
    
    /* 
     * remove - remove from the table the entry for the specified key
     * and return the associated collection of values, or null if the key 
     * is not in the table
     */
    public Queue<Object> remove(Object key) {
        /** Replace the following line with your implementation. **/
        if (key == null){
            throw new IllegalArgumentException("invalid");
        }
        int i = h1(key);
        if (i < table.length){
            Node toRemove = new Node(key, table[i]);
            Node trav = table[i];
            Node trail = null;
            if (trav.next == null){
                Node result = table[i];
                table[i] = null;
                numKeys--;
                return result.values;
            }
            while (trav != null){
                if (trav.key == toRemove.key){
                    trail.next = trav.next;
                    trav = trav.next;
                }
                trail = trav;
                trav = trav.next;
            }
            numKeys--;
            return table[i].values;
        }
        return null;
    }
    
    
    /*** Add the other required methods here ***/
    public int getNumKeys(){
        return numKeys;
    }
    
    public double load(){
        double quotient = (double)numKeys/table.length;
        return quotient;
    }

    public Object[] getAllKeys(){
        Object[] arr = new Object[numKeys];
        int count = 0;
        int idx = 0;
        while (count < table.length){
            Node trav = table[count];
            while (trav != null){
                arr[idx] = trav.key;
                trav = trav.next;
                idx++;
            }
            count++;
        }
        return arr;
    }

    public void resize(int n){
        if (n < table.length){
            throw new IllegalArgumentException("less than current size");
        }
        if (n == table.length){
            return;
        }

        // LLQueue<Object> temp = new LLQueue<>();
        // for (int i = 0; i < table.length; i++){
        //     while (table[i] != null){
        //         temp.insert(table[i].key);
        //     }
        // }

        ChainedHashTable newtable = new ChainedHashTable(n);
        int idx = 0;
        while (idx < table.length){
            Node trav = table[idx];
            while (trav != null){
                newtable.insert(trav.key, trav.values);
                trav = trav.next;
            }
            idx++;
        }

        table = newtable.table;
    }
    
    /*
     * toString - returns a string representation of this ChainedHashTable
     * object. *** You should NOT change this method. ***
     */
    public String toString() {
        String s = "[";
        
        for (int i = 0; i < table.length; i++) {
            if (table[i] == null) {
                s += "null";
            } else {
                String keys = "{";
                Node trav = table[i];
                while (trav != null) {
                    keys += trav.key;
                    if (trav.next != null) {
                        keys += "; ";
                    }
                    trav = trav.next;
                }
                keys += "}";
                s += keys;
            }
        
            if (i < table.length - 1) {
                s += ", ";
            }
        }       
        
        s += "]";
        return s;
    }

    public static void main(String[] args) {
        /** Add your unit tests here **/
        //import java.util.*;


        // ChainedHashTable table = new ChainedHashTable(5);
        // table.insert("howdy", 15);
        // table.insert("goodbye", 10);
        // System.out.println(table.insert("apple", 5));
        // table.insert("howdy", 25);
        // System.out.println(table.numKeys);
        // System.out.println(table);
        // table.remove("goodbye");
        // System.out.println(table);
        // System.out.println(table.numKeys);
        // ChainedHashTable table = new ChainedHashTable(5);
        // table.insert("howdy", 15);
        // table.insert("goodbye", 10);
        // table.insert("apple", 5);
        // System.out.println(table.getNumKeys());
        // table.insert("howdy", 25);     // insert a duplicate
        // System.out.println(table.getNumKeys());
        // ChainedHashTable table = new ChainedHashTable(5);
        // table.insert("howdy", 15);
        // table.insert("goodbye", 10);
        // table.insert("apple", 5);
        // System.out.println(table.load());
        // table.insert("pear", 6);
        // System.out.println(table.load());

        // ChainedHashTable table = new ChainedHashTable(5);
        // table.insert("howdy", 15);
        // table.insert("goodbye", 10);
        // table.insert("apple", 5);
        // table.insert("howdy", 25);    // insert a duplicate
        // System.out.println(table);
        // Object[] keys = table.getAllKeys();
        // System.out.println(Arrays.toString(keys));

        // ChainedHashTable table = new ChainedHashTable(5);
        // table.insert("test", 18);
        // System.out.println(table);
        // System.out.println(table.remove("test"));
        // //table.remove("test");
        // System.out.println(table);
        // System.out.println(table.getNumKeys());
        // table.insert("howdy", 15);
        // table.insert("goodbye", 10);
        // table.insert("apple", 5);
        // System.out.println(table);
        // table.resize(7);
        // System.out.println(table);
    }
}
